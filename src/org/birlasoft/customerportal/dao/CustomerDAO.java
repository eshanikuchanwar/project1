package org.birlasoft.customerportal.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import com.birlasoft.customerportal.model.CustomerVO;
import com.birlasoft.customerportal.util.ConnectionDB;

/*
 * DATA ACCESS LAYER
 * addCutsomer()
 * displayCustomerList()
 * deleteCustomerRecord
 * updateCustomerDetails()
 * searchPaintingById()
 */

public class CustomerDAO {

	
	private static Connection con;


	public static int addCustomer(CustomerVO customer)
	{    
		
		int result=0;
		Connection con =null;
		String QUERY="INSERT INTO CUSTOMERS VALUES(?,?,?,?,?)";//insert values in customer
		try
		{
		ConnectionDB.loadDrivers();//loading drivers
		}
		catch(CustomerDatabaseException e)
		{
			System.out.println("problem in loading connection"+e);
		}
		
		try
		{
		con= ConnectionDB.getDBConnection();//throws CustomerDatabaseException
		
		//preparedStatement subInterface of Statement used to execute parameterized query
		PreparedStatement pStat = con.prepareStatement(QUERY);
		//prepareStatement() method of Connection interface is used to return the object of PreparedStatement
		
		//setString sets the String value to the given parameter index.
		                 pStat.setString(1, customer.getCustomerId());
		                 pStat.setString(2, customer.getCustomer_F_Name());
		                 pStat.setString(3, customer.getCustomer_L_Name());
		                 pStat.setString(4, customer.getCustomerAddress());
		                 pStat.setString(5, customer.getCustomerPhoneNumber());
		                 
		 //executes the query. It is used for create, drop, insert, update, delete etc.
		                result= pStat.executeUpdate();
		                
		                
		
		}
		catch(CustomerDatabaseException e)//catching exception thrown by getDBConnection
		{
			System.out.println("problem in creating connection:"+e);
		}
		catch(SQLException e)//catching/handling sql exception
		{
			System.out.println("problem in oracle query:"+e);
		}
		finally
		{
			ConnectionDB.closeDBConnection(con);//close connection to database
		}
		
		return result;
	}
	
	
	
	
	public static List<CustomerVO>  displayCustomerList()
	{
		String Query= "SELECT * FROM CUSTOMERS";//query to display all customers 
		Connection con=null;
		List<CustomerVO> customerList= new ArrayList<CustomerVO>();
		try
		{
                    con =ConnectionDB.getDBConnection();
                    
         //preparedStatement subInterface of Statement used to execute parameterized query       
			PreparedStatement pStat= con.prepareStatement(Query);

			
        /*
         * ResultSet is a table of data representing a database result set, 
	     * which is usually generated by executing a statement that queries the database.
	    */
			
			 ResultSet  result=  pStat.executeQuery();//executes the query
			 
			    while(result.next())//pointer to the starting index of the desired table
			    {
			    	 //fetching values from database using getString
			    	String cId = result.getString(1);
			    	String cFName = result.getString(2);
			    	String cLName = result.getString(3);
			    	String cAddress=result.getString(4);
			    	String contactNumber = result.getString(5);
			    	CustomerVO customer=new CustomerVO(cId,cFName,cLName,cAddress,contactNumber);
			    	customerList.add(customer);//adding current customer details into arrayList
			    	
			    }
			
			
		}
		catch(CustomerDatabaseException e)//catching exception thrown by getDBConnection
		{
			System.out.println("problem in fetching customer:"+ e);
		}
		catch(SQLException e)//catching/handling sql exception
		{
			System.out.println("problem in oracle query:"+e);
		}
		
		
		return customerList;
		
	}
	
	
	
	//delete a customer record by entering its c_id
	public static int deleteCustomerRecord(String c_id)
	{    
		
		int row=0;
		Connection con =null;
		//PreparedStatement pStat=null;
		
		
		try
		{
		con= ConnectionDB.getDBConnection();//throws CuatomerDatabaseException
		
		String 	QUERY=	"DELETE FROM CUSTOMERS WHERE C_ID=?";//deleting customer record from database
		
	    //preparedStatement subInterface of Statement used to execute parameterized query  
	         PreparedStatement pStat = con.prepareStatement(QUERY);
		
	         
	    //setString sets the String value to the given parameter index.
	         pStat.setString(1, c_id);
	         
		row= pStat.executeUpdate();//executes the query. It is used for create, drop, insert, update, delete etc.
		
		                
		}
		catch(CustomerDatabaseException e)//catching exception thrown by getDBConnection
		{
			System.out.println("problem in deleting customer:"+e);
		}
		catch(SQLException e)//catching/handling sql exception
		{
			System.out.println("problem in sql query:"+e);
		}
		finally
		{
			ConnectionDB.closeDBConnection(con);
		}
		
		return row;
	}
	
	
	
	//update customer records
	public static int updateCustomerDetails(String customer_id)
	{    
		
		int result=0;
		Connection con =null;
		String QUERY="UPDATE  CUSTOMERS SET ADDRESS=?,C_CNO=? WHERE C_ID=?";//updates attributes into the table
		
		try
		{
		con= ConnectionDB.getDBConnection();
		
		CustomerVO customer=new CustomerVO();//customer object created
		
		@SuppressWarnings("resource")
		Scanner scc=new Scanner(System.in);
		
		System.out.println("Enter new address");//enter updated address
		String address=scc.nextLine();
		
		System.out.println("Enter new contact number");//enter contact no to be updated
		String contactNo=scc.nextLine();
		
		//set updated address and contact no
		customer.setCustomerAddress(address);
		customer.setCustomerPhoneNumber(contactNo);
		customer.setCustomerId(customer_id);
		
		
		//preparedStatement subInterface of Statement used to execute parameterized query  
		PreparedStatement pStat = con.prepareStatement(QUERY);
		                
		//setString sets the String value to the given parameter index.
		                 pStat.setString(1, customer.getCustomerAddress());
		                 pStat.setString(2, customer.getCustomerPhoneNumber());
		                 pStat.setString(3, customer_id);
		                
		                result= pStat.executeUpdate();
		 }
		catch(CustomerDatabaseException e)//catching exception thrown by getDBConnection
		{
			System.out.println("problem in updating customer:"+e);
		}
		catch(SQLException e)//handling oracle exception
		{
			System.out.println("problem in sql  query:"+e);
		}
		finally
		{
			ConnectionDB.closeDBConnection(con);
		}
		return result;
	}
	
	
	
	//search a particular customer record
	public static List<CustomerVO>  searchCustomerById(String customer_id) 
	{
		ResultSet result = null;

		String Query= "SELECT C_ID,FNAME,LNAME,ADDRESS,C_CNO FROM CUSTOMERS WHERE C_ID=?";
		List<CustomerVO> customerList= new ArrayList<CustomerVO>();
		
		try {
			
			con= ConnectionDB.getDBConnection();
			//preparedStatement subInterface of Statement used to execute parameterized query 
				PreparedStatement pStat = con.prepareStatement(Query);
				
			//setString sets the String value to the given parameter index.
				  pStat.setString(1,customer_id);
				  result = pStat.executeQuery();
				  
				  while (result.next())//pointer to the starting index of the desired table
				  {
					  //fetching customer details from table
					  String cId = result.getString(1);
				    	String cFName = result.getString(2);
				    	String cLName = result.getString(3);
				    	String cAddress=result.getString(4);
				    	String contactNumber = result.getString(5);
				    	CustomerVO customer1=new CustomerVO(cId,cFName,cLName,cAddress,contactNumber);
				    	customerList.add(customer1);//adding particular searched record of the customer into list
				    	
				  }
		} 
		catch(CustomerDatabaseException e)
		{
			System.out.println("problem in connection:"+e);
		}
		catch(SQLException e)
		{
			System.out.println("problem in oracle query:"+e);
		}
		finally
		{
			ConnectionDB.closeDBConnection(con);
		}
		return customerList;
		
	}
	
	

}
